# -*- coding: utf-8 -*-
"""ML Project Github/Streamlit

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bJBYxuhuDpd3QPhO2zuO6vXE8S8_TCcl
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install streamlit

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from xgboost import XGBRegressor
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.metrics import mean_squared_error, r2_score

st.set_page_config(layout="wide", page_title="Zomato Delivery Time Predictor", page_icon="üçî")

# Custom CSS for Zomato theme with specific colors, fonts, and borders
st.markdown("""
<style>
/* Apply Times New Roman font to all text */
body, .stApp, .stApp label, .stApp h1, .stApp h2, .stApp h3, .stApp h4, .stApp h5, .stApp h6, .stApp .st-emotion-cache-1vbky99, .st-emotion-cache-10trukw, .st-emotion-cache-16z7h0f, .st-emotion-cache-1l269gk label, .st-emotion-cache-1l269gk .st-emotion-cache-1vbky99, .st-emotion-cache-1l269gk .stButton button, .bank-card, .bank-card-header, .metric-label, .metric-value {
    font-family: "Times New Roman", Times, serif !important;
}

/* Main app container - Dark Red Background, White Font, Grey Border to Font */
body, .stApp {
    background-color: #A8232C !important; /* Zomato Dark Red */
    color: #F5F5F5 !important; /* Warm White / Off White */
}

/* Apply grey border to font on main page elements where appropriate */
.stApp h1, .stApp h2, .stApp h3, .stApp h4, .stApp h5, .stApp h6, .stApp label, .stApp .st-emotion-cache-1vbky99, .st-emotion-cache-10trukw, .st-emotion-cache-16z7h0f {
    text-shadow: 1px 1px 1px #D8D8D8 !important; /* Light Gray border to font */
}


/* Sidebar - Grey Background, White Font, Dark Red Border to Font */
.st-emotion-cache-1l269gk { /* Target sidebar container */
    background-color: #D8D8D8 !important; /* Light Gray */
    color: #F5F5F5 !important; /* Warm White / Off White */
}

/* Sidebar header and text within sidebar - White Font, Dark Red Border to Font */
.st-emotion-cache-1wivap2, .st-emotion-cache-1l269gk label, .st-emotion-cache-1l269gk .st-emotion-cache-1vbky99, .st-emotion-cache-1l269gk .stButton button {
    color: #F5F5F5 !important; /* Warm White / Off White */
    text-shadow: 1px 1px 1px #A8232C !important; /* Zomato Dark Red border to font */
}


/* Buttons - Zomato Red Background, White Font */
.stButton button {
    background-color: #E23744 !important; /* Zomato Red (Primary) */
    color: #F5F5F5 !important; /* Warm White / Off White */
    border: none !important;
    padding: 10px 20px !important;
    text-align: center !important;
    text-decoration: none !important;
    display: inline-block !important;
    font-size: 16px !important;
    margin: 4px 2px !important;
    cursor: pointer !important;
    border-radius: 5px !important;
}
.stButton button:hover {
    background-color: #A8232C !important; /* Zomato Dark Red */
    color: #F5F5F5 !important; /* Warm White / Off White */
}

/* Metric card styling with grey border */
.bank-card {
    border: 1px solid #D8D8D8 !important; /* Light Gray */
    border-radius: 5px !important;
    padding: 15px !important;
    margin-bottom: 15px !important;
    box-shadow: 2px 2px 10px rgba(0,0,0,0.1) !important;
    background-color: #F5F5F5 !important; /* Warm White / Off White */
    color: #2D2D2D !important; /* Charcoal / Text Gray */
}
.bank-card-header {
    font-weight: bold !important;
    margin-bottom: 10px !important;
    color: #A8232C !important; /* Zomato Dark Red */
}
.metric {
    margin-bottom: 5px !important;
}
.metric-label {
    font-weight: normal !important;
    color: #2D2D2D !important; /* Charcoal / Text Gray */
}
/* Estimated delivery time and output - Grey Font */
.metric-value {
    font-weight: bold !important;
    color: #F5F5F5 !important; /* Warm White / Off White */ /* Changed metric value color to White */
    text-shadow: 1px 1px 1px #D8D8D8 !important; /* Light Gray border to font */ /* Added grey border to font */
    margin-left: 5px !important;
}
</style>
""", unsafe_allow_html=True)


@st.cache_data
def load_and_preprocess_data(file_path):
    """Loads Zomato data, handles missing values, and prepares it for modeling."""
    df = pd.read_csv(file_path)
    df = df.rename(columns={'Distance_km':'Distance_Km', 'Order_Value_INR': 'Order_Value', 'Rider_Experience_years' : 'Rider_Experience',  'Delivery_Time_min': 'Delivery_Time'})

    categorical_cols = ['Traffic', 'Weather', 'Time_of_Day', 'Cuisine_Type', 'Restaurant_Popularity', 'Vehicle_Type']

    x_raw = df.drop(columns=['Delivery_Time']) # Removed unwanted columns
    y = df['Delivery_Time']
    x = pd.get_dummies(x_raw, columns=[col for col in categorical_cols if col in x_raw.columns], drop_first=False) # Removed unwanted columns from one-hot encoding

    return df, x, y

@st.cache_resource
def train_models(x_train_scaled, y_train):
    """Trains regression models."""
    # Re-train XGBoost model as it was used for prediction
    xgb_reg = XGBRegressor(random_state=42)
    xgb_reg.fit(x_train_scaled, y_train)

    return xgb_reg # Only return the XGBoost model

st.title("Zomato Delivery Time Predictor ‚è±Ô∏è")
st.write("Enter delivery details in the sidebar to predict the delivery time.")

try:
    df, x, y = load_and_preprocess_data('Zomato Delivery Prediction.csv')

    st.sidebar.header("Delivery Details")
    distance = st.sidebar.number_input("Distance (km)", float(df['Distance_Km'].min()), float(df['Distance_Km'].max()), float(df['Distance_Km'].mean()))
    order_size = st.sidebar.number_input("Order Size", int(df['Order_Size'].min()), int(df['Order_Size'].max()), int(df['Order_Size'].mean()))
    traffic = st.sidebar.selectbox("Traffic", df['Traffic'].unique())
    weather = st.sidebar.selectbox("Weather", df['Weather'].unique())
    time_of_day = st.sidebar.selectbox("Time of Day", df['Time_of_Day'].unique())
    cuisine_type = st.sidebar.selectbox("Cuisine Type", df['Cuisine_Type'].unique())
    order_value = st.sidebar.number_input("Order Value (INR)", int(df['Order_Value'].min()), int(df['Order_Value'].max()), int(df['Order_Value'].mean()))
    restaurant_popularity = st.sidebar.selectbox("Restaurant Popularity", df['Restaurant_Popularity'].unique())
    rider_experience = st.sidebar.slider("Rider Experience (years)", int(df['Rider_Experience'].min()), int(df['Rider_Experience'].max()), int(df['Rider_Experience'].mean()))
    vehicle_type = st.sidebar.selectbox("Vehicle Type", df['Vehicle_Type'].unique())


    predict_button = st.sidebar.button("Predict Delivery Time", use_container_width=True)

    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)
    scaler = StandardScaler()
    x_train_scaled = scaler.fit_transform(x_train)
    x_test_scaled = scaler.transform(x_test)
    xgb_reg = train_models(x_train_scaled, y_train) # Only train and get XGBoost

    # Prediction section
    if predict_button:
        input_data = pd.DataFrame({
            'Distance_Km': [distance], 'Order_Size': [order_size], 'Traffic': [traffic], 'Weather': [weather],
            'Time_of_Day': [time_of_day], 'Cuisine_Type': [cuisine_type], 'Order_Value': [order_value],
            'Restaurant_Popularity': [restaurant_popularity], 'Rider_Experience': [rider_experience],
            'Vehicle_Type': [vehicle_type]
        })

        # Recreate the dummy columns based on the original training data's columns
        # Ensure only the columns used in training are included and aligned
        input_encoded = pd.get_dummies(input_data)
        # Align columns with the training data's columns after one-hot encoding
        input_aligned = input_encoded.reindex(columns=x.columns, fill_value=0)
        input_scaled = scaler.transform(input_aligned)

        predicted_time = xgb_reg.predict(input_scaled)[0]

        st.markdown(f"### Predicted Delivery Time")
        st.metric(label="Estimated Delivery Time", value=f"{predicted_time:.2f} minutes")

    else:
        st.info("Please fill in the delivery details in the sidebar and click 'Predict Delivery Time'.")

except FileNotFoundError:
    st.error("Error: `Zomato Delivery Prediction.csv` not found. Please place it in the same directory as your app script.")
except Exception as e:
    st.error(f"An error occurred: {e}")