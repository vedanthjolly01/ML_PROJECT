# -*- coding: utf-8 -*-
"""ML Project Github/Streamlit

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bJBYxuhuDpd3QPhO2zuO6vXE8S8_TCcl
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from xgboost import XGBRegressor
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.metrics import mean_squared_error, r2_score

st.set_page_config(layout="wide", page_title="Zomato Delivery Time Predictor", page_icon="üçî")

# Custom CSS for Zomato theme (red and white) and metric cards
st.markdown("""
<style>
.stApp {
    background-color: #FFFFFF;
    color: #333333;
}
.sidebar .sidebar-content {
    background-color: #CB202D;
    color: #FFFFFF;
}
.st-bz {
    color: #CB202D; /* Headers */
}
.st-at {
    color: #CB202D; /* Labels */
}
.bank-card {
    border: 1px solid #ddd;
    border-radius: 5px;
    padding: 15px;
    margin-bottom: 15px;
    box-shadow: 2px 2px 10px rgba(0,0,0,0.1);
    background-color: #f9f9f9;
}
.bank-card-header {
    font-weight: bold;
    margin-bottom: 10px;
    color: #333;
}
.metric {
    margin-bottom: 5px;
}
.metric-label {
    font-weight: normal;
    color: #555;
}
.metric-value {
    font-weight: bold;
    color: #CB202D; /* Zomato red */
    margin-left: 5px;
}
</style>
""", unsafe_allow_html=True)


@st.cache_data
def load_and_preprocess_data(file_path):
    """Loads Zomato data, handles missing values, and prepares it for modeling."""
    df = pd.read_csv(file_path)
    df = df.rename(columns={'Distance_km':'Distance_Km', 'Order_Value_INR': 'Order_Value', 'Rider_Experience_years' : 'Rider_Experience',  'Delivery_Time_min': 'Delivery_Time'})

    categorical_cols = ['Traffic', 'Weather', 'Time_of_Day', 'Cuisine_Type', 'Restaurant_Popularity', 'Vehicle_Type']

    x_raw = df.drop(columns=['Delivery_Time'])
    y = df['Delivery_Time']
    x = pd.get_dummies(x_raw, columns=[col for col in categorical_cols if col in x_raw.columns], drop_first=False)

    return df, x, y

@st.cache_resource
def train_models(x_train_scaled, y_train):
    """Trains regression models."""
    # Re-train XGBoost model as it was used for prediction
    xgb_reg = XGBRegressor(random_state=42)
    xgb_reg.fit(x_train_scaled, y_train)

    return xgb_reg # Only return the XGBoost model

st.title("Zomato Delivery Time Predictor ‚è±Ô∏è")
st.write("Enter delivery details in the sidebar to predict the delivery time.")

try:
    df, x, y = load_and_preprocess_data('Zomato Delivery Prediction.csv')

    st.sidebar.header("Delivery Details")
    distance = st.sidebar.number_input("Distance (km)", float(df['Distance_Km'].min()), float(df['Distance_Km'].max()), float(df['Distance_Km'].mean()))
    traffic = st.sidebar.selectbox("Traffic", df['Traffic'].unique())
    weather = st.sidebar.selectbox("Weather", df['Weather'].unique())
    time_of_day = st.sidebar.selectbox("Time of Day", df['Time_of_Day'].unique())
    restaurant_popularity = st.sidebar.selectbox("Restaurant Popularity", df['Restaurant_Popularity'].unique())
    rider_experience = st.sidebar.slider("Rider Experience (years)", int(df['Rider_Experience'].min()), int(df['Rider_Experience'].max()), int(df['Rider_Experience'].mean()))
    vehicle_type = st.sidebar.selectbox("Vehicle Type", df['Vehicle_Type'].unique())

    predict_button = st.sidebar.button("Predict Delivery Time", use_container_width=True)

    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)
    scaler = StandardScaler()
    x_train_scaled = scaler.fit_transform(x_train)
    x_test_scaled = scaler.transform(x_test)
    xgb_reg = train_models(x_train_scaled, y_train) # Only train and get XGBoost

    # Prediction section
    if predict_button:
        input_data = pd.DataFrame({
            'Distance_Km': [distance], 'Traffic': [traffic], 'Weather': [weather],
            'Time_of_Day': [time_of_day],
            'Restaurant_Popularity': [restaurant_popularity], 'Rider_Experience': [rider_experience],
            'Vehicle_Type': [vehicle_type]
        })

        # Recreate the dummy columns based on the original training data's columns
        input_encoded = pd.get_dummies(input_data)
        input_aligned = input_encoded.reindex(columns=x.columns, fill_value=0)
        input_scaled = scaler.transform(input_aligned)

        predicted_time = xgb_reg.predict(input_scaled)[0]

        st.markdown(f"### Predicted Delivery Time")
        st.metric(label="Estimated Delivery Time", value=f"{predicted_time:.2f} minutes")

    else:
        st.info("Please fill in the delivery details in the sidebar and click 'Predict Delivery Time'.")

except FileNotFoundError:
    st.error("Error: `Zomato Delivery Prediction.csv` not found. Please place it in the same directory as your app script.")
except Exception as e:
    st.error(f"An error occurred: {e}")