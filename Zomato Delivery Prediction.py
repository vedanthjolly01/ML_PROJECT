# -*- coding: utf-8 -*-
"""ML Project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MB98lqAvHS6BvHD5n5BrMu5B69hMOcDb
"""

import numpy as np
import pandas as pd

from sklearn.model_selection import train_test_split

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import LabelEncoder,StandardScaler
from sklearn.metrics import accuracy_score, confusion_matrix, roc_auc_score, roc_curve, classification_report, ConfusionMatrixDisplay
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC
from sklearn.model_selection import GridSearchCV, RandomizedSearchCV

import matplotlib.pyplot as plt
from sklearn.tree import plot_tree
import seaborn as sns

data = pd.read_csv("Zomato Delivery Prediction.csv")
data = data.rename(columns={'Distance_km':'Distance_Km', 'Order_Value_INR': 'Order_Value', 'Rider_Experience_years' : 'Rider_Experience',  'Delivery_Time_min': 'Delivery_Time'})
data.index = data.index + 1
data.head()

data.tail()

data.dtypes

data.shape

data.columns

data.info()

data.nunique()

data.isnull().sum()

x = data.drop('Delivery_Time', axis=1)
y = data['Delivery_Time']

x.head()

y.head()

x = data.drop('Delivery_Time', axis=1)
y = data['Delivery_Time']

categorical_cols = ['Traffic', 'Weather', 'Time_of_Day', 'Cuisine_Type', 'Restaurant_Popularity', 'Vehicle_Type']

x_encoded = pd.get_dummies(x, columns=[col for col in categorical_cols if col in x.columns], drop_first=False)

x_encoded.head()

x_train, x_test, y_train, y_test = train_test_split(x_encoded, y, test_size=0.2, random_state=42, shuffle=True)

x_train.head()

y_train.head()

x_test.head()

y_test.head()

x_train.shape , x_test.shape , y_train.shape , y_test.shape

model = LinearRegression()
model.fit(x_train, y_train)

y_pred = model.predict(x_test)

r2 = r2_score(y_test, y_pred)
print(f"R-squared: {r2:.4f}")

n = x_test.shape[0]
k = x_test.shape[1]
adjusted_R2 = 1 - (1 - r2) * (n - 1) / (n - k - 1)
print(f"Adjusted R-squared: {adjusted_R2:.4f}")

mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error (MSE): {mse:.4f}")

rmse = np.sqrt(mse)
print(f"Root Mean Squared Error (RMSE): {rmse:.4f}")

"""R-squared (R2): Your R2 of 0.8898 means about 89% of the variability in Delivery Time is explained by your chosen features.

Adjusted R-squared: Your Adjusted R2 of 0.8740 confirms the model fits well, accounting for feature count. It's a robust measure of model fit on your data.

Mean Squared Error (MSE): Your MSE of 42.04 means the average squared difference between predicted and actual times is about 42.04 in your dataset.

Root Mean Squared Error (RMSE): Your RMSE of 6.48 minutes indicates the typical prediction error for Delivery Time is around 6.5 minutes in your data.
"""

numeric_data = data[['Distance_Km', 'Order_Size', 'Order_Value', 'Rider_Experience', 'Delivery_Time']]

numeric_correlation_matrix = numeric_data.corr()

plt.figure(figsize=(8, 6))
sns.heatmap(numeric_correlation_matrix, annot=True, cmap='viridis', fmt=".2f")
plt.title('Correlation Matrix of Numeric Features and Delivery Time')
plt.show()

"""This heatmap displays the linear relationships between numeric features and Delivery Time. Each cell's color and value indicate the strength and direction of the correlation. A strong positive correlation (0.76) exists between Distance_km and Delivery Time, indicating longer deliveries for greater distances. Order_Size shows a weak positive correlation (0.16), while Order_Value has a very weak link (0.00). Rider_Experience has a weak negative correlation (-0.07), suggesting slightly shorter times with more experience."""

data_encoded_single = data.copy()

categorical_cols = ['Traffic', 'Weather', 'Time_of_Day', 'Cuisine_Type', 'Restaurant_Popularity', 'Vehicle_Type']
for col in categorical_cols:
    le = LabelEncoder()
    data_encoded_single[col] = le.fit_transform(data_encoded_single[col])

columns_for_correlation = categorical_cols + ['Delivery_Time']
data_for_correlation = data_encoded_single[columns_for_correlation]

correlation_matrix_categorical = data_for_correlation.corr()

delivery_time_correlation_categorical = correlation_matrix_categorical[['Delivery_Time']].sort_values(by='Delivery_Time', ascending=False)

plt.figure(figsize=(8, 6))
sns.heatmap(delivery_time_correlation_categorical, annot=True, cmap='viridis', fmt=".2f")
plt.title('Correlation with Delivery Time (Categorical Features)')
plt.show()

"""This heatmap shows how encoded categorical features linearly relate to Delivery Time. 'Weather' has the strongest positive correlation (0.33) among categorical features, suggesting certain weather conditions impact delivery time more. 'Time_of_Day' shows a weak negative correlation (-0.11), indicating some times might be slightly faster. 'Traffic' (-0.09), 'Restaurant_Popularity' (-0.07), 'Vehicle_Type' (0.05), and 'Cuisine_Type' (0.04) have weaker correlations. Overall, Weather has the most notable linear relationship with Delivery Time among these categorical factors after encoding.


"""

fig, axes = plt.subplots(2, 3, figsize=(14, 8))
axes = axes.flatten()

categorical_features = ['Traffic', 'Weather', 'Time_of_Day', 'Cuisine_Type', 'Restaurant_Popularity', 'Vehicle_Type']

cmap = plt.get_cmap('viridis')
color_indices = [0.15, 0.95, 0.7, 0.35]
base_colors = [cmap(i) for i in color_indices]

for i, feature in enumerate(categorical_features):
    avg_delivery_time = data.groupby(feature)['Delivery_Time'].mean().reset_index()

    colors = [base_colors[j % 4] for j in range(len(avg_delivery_time))]

    axes[i].pie(
        avg_delivery_time['Delivery_Time'],
        labels=avg_delivery_time[feature],
        autopct='%1.1f%%',
        startangle=140,
        pctdistance=0.7,
        labeldistance=1.1,
        radius=0.35,
        wedgeprops={'edgecolor': 'black', 'linewidth': 1.2},
        textprops={'fontsize': 8},
        colors=colors
    )
    axes[i].set_title(f'Average Delivery Time by {feature}', y=-0.25, fontsize=10)
    axes[i].axis('equal')

if len(categorical_features) < len(axes):
    for j in range(len(categorical_features), len(axes)):
        fig.delaxes(axes[j])

plt.subplots_adjust(wspace=0.7, hspace=0.7)
plt.show()

"""Traffic: High traffic contributes 36.8% of the total average delivery time, Medium 34.1%, Low 29.0%. Delivery times increase as traffic level rises. High traffic slows deliveries significantly, which is expected.

Weather: Stormy: 36.5%, Rainy: 34.2%, Clear: 29.3%. Bad weather (stormy/rainy) increases delivery times. Clear weather results in faster deliveries. Weather is a significant factor affecting delivery efficiency.

Time of Day: Night: 27.7%, Evening: 25.8%, Afternoon: 23.7%, Morning: 22.8%.Deliveries are slower at night, likely due to fewer riders on the road or logistical constraints. Morning deliveries are fastest.

Cuisine Type: Mexican: 26.3%, Indian: 25.0%, Italian: 24.0%, Chinese: 24.7%.Certain cuisines (like Mexican) may take slightly longer to prepare or package, affecting delivery time. Differences are smaller compared to traffic or weather.

Restaurant Popularity: High: 35.0%, Medium: 33.8%, Low: 31.2%. Popular restaurants have longer delivery times, possibly due to higher order volumes and preparation delays.

Vehicle Type: Cycle: 26.6%, Electric: 25.8%, Scooter: 24.6%, Bike: 23.6%. Faster vehicles (like bikes and scooters) deliver quicker, while slower modes (cycle, electric bikes) take longer.
"""

numeric_features = ['Distance_Km', 'Order_Size', 'Order_Value', 'Rider_Experience']
target_variable = 'Delivery_Time'

cmap = plt.get_cmap('viridis')
dark_color = cmap(0.1)

for feature in numeric_features:
    plt.figure(figsize=(8, 6))
    sns.scatterplot(x=data[feature], y=data[target_variable], color=dark_color)
    plt.title(f'Relationship between {feature} and {target_variable}')
    plt.xlabel(feature)
    plt.ylabel(target_variable)
    plt.show()

"""Distance_km vs. Delivery_Time: This scatter plot illustrates the relationship between Distance_km and Delivery Time. It shows a clear positive trend: as Distance_km increases, Delivery Time generally increases as well. This visual pattern supports the strong positive correlation of 0.76 found earlier.

Order_Size vs. Delivery_Time: This scatter plot depicts the relationship between Order_Size and Delivery Time. The points are widely scattered with no apparent upward or downward trend. This indicates a very weak linear relationship, consistent with the low correlation of 0.16.

Order_Value vs. Delivery_Time: This scatter plot visualizes the relationship between Order_Value and Delivery Time. The points are highly dispersed, showing no discernible pattern or trend. This reflects the extremely weak correlation of 0.00 observed previously.

Rider_Experience vs. Delivery_Time: This scatter plot shows the relationship between Rider_Experience and Delivery Time. The points are scattered, and a clear linear trend is not strongly evident. While a weak negative correlation of -0.07 was found, this plot doesn't strongly show delivery time consistently decreasing with experience.

"""

plt.figure(figsize=(12, 6))

cmap = plt.get_cmap('viridis')
yellow_color = cmap(0.95)
purple_color = cmap(0.)

sns.lineplot(x=y_test.index, y=y_test, label='Actual Delivery Time', color=yellow_color, alpha=0.7)
sns.lineplot(x=y_test.index, y=y_pred, label='Predicted Delivery Time', color=purple_color, alpha=0.7)
plt.xlabel("Data Index")
plt.ylabel("Delivery Time")
plt.title("Actual vs Predicted Delivery Time Comparison (Line Plot)")
plt.legend()
plt.show()

"""This line plot compares the Actual Delivery Time with the Predicted Delivery Time over the data index. The yellow line represents the actual delivery times from the test set. The purple line shows the delivery times predicted by your linear regression model. When the predicted line closely follows the actual line, it indicates good model performance. The plot visually demonstrates how well your model's predictions align with the true delivery times."""